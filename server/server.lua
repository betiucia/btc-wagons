local locale = Locale[Config.Locale]

if Config.FrameWork == 'rsg' then
    RSGCore = exports['rsg-core']:GetCoreObject() -- Puxando o core do RSG
end

local wagons = {} -- Tabela para armazenar as carro√ßas e seus donos

--- Fun√ß√£o que cria Callbacks
local Callbacks = {}

RegisterNetEvent("btc-wagons:triggerCallback")
AddEventHandler("btc-wagons:triggerCallback", function(name, requestId, ...)
    local source = source
    if Callbacks[name] then
        Callbacks[name](source, function(...)
            TriggerClientEvent("btc-wagons:callbackResponse", source, requestId, ...)
        end, ...)
    end
end)

function RegisterServerCallback(name, cb)
    Callbacks[name] = cb
end

------------------ save wagon -------------------

RegisterServerEvent("btc-wagons:saveWagonToDatabase")
AddEventHandler("btc-wagons:saveWagonToDatabase", function(wagon, custom, moneyType)
    local src = source
    local maxWagonsPerPlayer = Config.maxWagonsPerPlayer -- ‚úÖ Defina aqui o limite desejado

    local wagonName, wagonPrice = nil, nil

    -- Buscar os detalhes da carro√ßa no Config
    for type, info in pairs(Config.Wagons) do
        for k, v in pairs(info) do
            if wagon == k and moneyType == 'cash' then
                wagonName = v.name
                wagonPrice = v.price
                break
            elseif wagon == k and moneyType == 'gold' then
                wagonName = v.name
                wagonPrice = v.priceGold
                break
            elseif wagon == k then
                wagonName = v.name
                wagonPrice = v.price
                break
            end
        end
    end

    if not wagonName or not custom then
        if Config.Debug then print("Erro: Dados incompletos para salvar a carro√ßa.") end
        return
    end

    local citizenid, success = GetPlayerDataAndRemoveMoney(src, wagonPrice, moneyType)

    if not success then
        Notify(locale["cl_dont_have_money"], 5000, "error", src)
        return
    end

    -- Verifica se j√° atingiu o limite de carro√ßas
    MySQL.Async.fetchScalar(
        'SELECT COUNT(*) FROM btc_wagons WHERE citizenid = @citizenid',
        { ['@citizenid'] = citizenid },
        function(totalCount)
            if totalCount >= maxWagonsPerPlayer then
                Notify(locale["cl_max_wagons_reached"] or "Voc√™ j√° possui o n√∫mero m√°ximo de carro√ßas!", 5000, "error", src)
                -- Estorna o dinheiro
                GetPlayerDataAndAddMoney(source, wagonPrice, moneyType)
                return
            end

            -- Verifica se j√° tem uma carro√ßa com o mesmo nome
            MySQL.Async.fetchScalar(
                'SELECT COUNT(*) FROM btc_wagons WHERE citizenid = @citizenid AND JSON_EXTRACT(custom, "$.name") = @wagonName',
                {
                    ['@citizenid'] = citizenid,
                    ['@wagonName'] = custom.name
                },
                function(count)
                    if count > 0 then
                        Notify(locale["cl_wagon_name_exists"], 5000, "error", src)
                        GetPlayerDataAndAddMoney(source, wagonPrice, moneyType)
                        if Config.Debug then
                            print("Erro: Jogador j√° tem uma carro√ßa com o nome " .. custom.name)
                        end
                        return
                    end

                    -- Salva no banco
                    MySQL.Async.execute(
                        'INSERT INTO btc_wagons (citizenid, wagon, custom, animals) VALUES (@citizenid, @wagon, @custom, @animals)',
                        {
                            ['@citizenid'] = citizenid,
                            ['@wagon'] = wagon,
                            ['@custom'] = json.encode(custom),
                            ['@animals'] = json.encode({})
                        },
                        function(rowsChanged)
                            if rowsChanged > 0 then
                                Notify(locale["cl_you_buy"], 5000, "success", src)
                                if Config.Debug then print("Carro√ßa salva com sucesso!") end
                            else
                                print("Erro ao salvar a carro√ßa no banco de dados!")
                            end
                        end
                    )
                end
            )
        end
    )
end)

---- Carregar carro√ßa do banco de dados ---

RegisterServerEvent("btc-wagons:getWagonDataByCitizenID")
AddEventHandler("btc-wagons:getWagonDataByCitizenID", function(serverSource)
    local src = nil
    if serverSource then
        src = serverSource -- ID do jogador que est√° salvando a carro√ßa
    else
        src = source       -- ID do jogador que est√° salvando a carro√ßa
    end

    local citizenid = GetCitizenID(src)

    -- Consulta os dados da carro√ßa pelo citizenid e verifica se o campo active = 1
    MySQL.Async.fetchAll('SELECT * FROM btc_wagons WHERE citizenid = @citizenid AND active = 1', {
        ['@citizenid'] = citizenid
    }, function(result)
        -- Se a carro√ßa for encontrada
        if result[1] then
            local wagonData = result[1]
            local customData = json.decode(wagonData.custom)   -- Decodifica o JSON armazenado
            local animalsData = json.decode(wagonData.animals) -- Decodifica o JSON armazenado

            -- Envia os dados da carro√ßa de volta ao cliente
            TriggerClientEvent("btc-wagons:receiveWagonData", src, wagonData.wagon, customData, animalsData, wagonData
                .id)
            if Config.Debug then
                print("Carro√ßa recuperada com sucesso: CitizenID - " .. citizenid)
            end
        else
            -- Caso a carro√ßa n√£o seja encontrada ou n√£o esteja ativa
            if Config.Debug then
                print("Carro√ßa n√£o encontrada ou n√£o ativa no banco de dados: CitizenID - " .. citizenid)
            end
        end
    end)
end)



------------------- Registrar Carro√ßa -----------------
RegisterNetEvent("btc-wagons:registerWagon")
AddEventHandler("btc-wagons:registerWagon", function(netId, wagonID, model)
    local source = source -- ID do jogador que spawnou a carro√ßa

    -- Armazena os dados da carro√ßa
    wagons[netId] = {
        owner = source,
        wagonID = wagonID,
        wagonModel = model

    }
    if Config.Debug then
        print(("üöÇ Carro√ßa registrada! NetworkID: %s | WagonID: %s | Dono: %s"):format(netId, wagonID, source))
    end
end)

RegisterNetEvent("btc-wagons:updateWagonAuth")
AddEventHandler("btc-wagons:updateWagonAuth", function(netId, citizenID, action)
    local source = source -- ID do jogador que est√° atualizando a carro√ßa

    -- Verifica se a carro√ßa existe
    if wagons[netId] then
        -- Garante que a lista de autorizados exista
        if not wagons[netId].authorized then
            wagons[netId].authorized = {}
        end

        if action == "add" then
            -- Adiciona um novo CitizenID √† lista de autorizados
            wagons[netId].authorized[citizenID] = true
            if Config.Debug then
                print(("üîë %s agora pode abrir a carro√ßa %s"):format(citizenID, netId))
            end
        elseif action == "remove" then
            -- Remove o CitizenID da lista de autorizados
            wagons[netId].authorized[citizenID] = nil
            if Config.Debug then
                print(("üö´ %s n√£o pode mais abrir a carro√ßa %s"):format(citizenID, netId))
            end
        end
    else
        if Config.Debug then
            print(("‚ö†Ô∏è Tentativa de atualizar uma carro√ßa inexistente! NetID: %s"):format(netId))
        end
    end
end)


-- Fun√ß√£o para obter informa√ß√µes de uma carro√ßa pelo Network ID
function GetWagonInfoByNetId(netId)
    return wagons[netId] or nil
end

-- Fun√ß√£o para obter informa√ß√µes de uma carro√ßa pelo WagonID
function GetWagonInfoByWagonId(wagonID)
    for netId, data in pairs(wagons) do
        if data.wagonID == wagonID then
            return netId, data
        end
    end
    return nil
end

RegisterServerCallback("btc-wagons:isWagonRegistered", function(source, cb, netId)
    local source = source
    if wagons[netId] then
        if source == wagons[netId].owner then
            -- Se o jogador for o dono da carro√ßa, informa que est√° registrada
            cb(true, true, wagons[netId].wagonID, wagons[netId].wagonModel, netId)
        else
            -- Envia a resposta confirmando que a carro√ßa est√° registrada
            cb(true, false, wagons[netId].wagonID, wagons[netId].wagonModel, netId)
        end
    end
    -- Se n√£o estiver registrada, informa ao client
    cb(false)
end)

RegisterServerEvent('btc-wagons:openWagonStash')
AddEventHandler('btc-wagons:openWagonStash', function(stash, wagonModel, wagonID, netId)
    local source = source                         -- ID do jogador tentando acessar o ba√∫
    local playerIdentifier = GetCitizenID(source) -- Obt√©m o CitizenID

    -- Verifica se a carro√ßa est√° registrada
    if wagons[netId] then
        local owner = wagons[netId].owner
        local authorized = wagons[netId].authorized or {}

        local isAuthorized = false
        for _, id in ipairs(authorized) do
            if id == playerIdentifier then
                isAuthorized = true
                break
            end
        end

        -- Se o jogador for o dono OU estiver na lista de autorizados
        if source == owner or isAuthorized then
            for type, infos in pairs(Config.Wagons) do
                for k, v in pairs(infos) do
                    if wagonModel == k then
                        local weight = v.maxWeight
                        local slots = v.slots
                        OpenStash(source, weight, slots, stash)
                        return
                    end
                end
            end
        else
            local firstname, lastname = GetName(source)
            for type, infos in pairs(Config.Wagons) do
                for k, v in pairs(infos) do
                    if wagonModel == k then
                        local data = {
                            citizenId = playerIdentifier,
                            netId = netId,
                            firstname = firstname,
                            lastname = lastname,
                            owner = owner,
                            targetID = source,
                            stash = stash,
                            weight = v.maxWeight,
                            slots = v.slots
                        }
                        TriggerClientEvent('btc-wagons:stashPermission', source, data)
                        return
                    end
                end
            end
        end
    end
end)

RegisterServerEvent('btc-wagons:robWagonStash')
AddEventHandler('btc-wagons:robWagonStash', function(data)
    local src = source
    local weight = data.weight
    local slots = data.slots
    local stash = data.stash
    local removeItem = RemoveItem(src, Config.Robbery.lockpick)
    if removeItem then
    OpenStash(src, weight, slots, stash)
    else
        Notify(locale["no_have_item"].. Config.Robbery.lockpickLabel, 5000, "error", src)
    end
end)

RegisterServerEvent('btc-wagons:removeItem')
AddEventHandler('btc-wagons:removeItem', function(data)
    local src = source
    RemoveItem(src, Config.Robbery.lockpick)
end)

RegisterServerEvent('btc-wagons:getOwnerPermission')
AddEventHandler('btc-wagons:getOwnerPermission', function(data)
    local owner = data.owner
    TriggerClientEvent('btc-wagon:askOwnerPermission', owner, data)
end)

RegisterServerEvent('btc-wagons:giveOwnerPermission')
AddEventHandler('btc-wagons:giveOwnerPermission', function(permission, data)
    local targetID = data.targetID
    local citizenId = data.citizenId
    local netId = data.netId

    if permission == 'confirm' then
        if not wagons[netId] then return end

        if not wagons[netId].authorized then
            wagons[netId].authorized = {}
        end

        -- Evita duplica√ß√£o
        for _, id in ipairs(wagons[netId].authorized) do
            if id == citizenId then return end
        end

        table.insert(wagons[netId].authorized, citizenId)

        Notify(locale["have_permission"], 5000, "success", targetID)
    else
        Notify(locale["no_permission"], 5000, "error", targetID)
    end
end)

--------------- checagem das carro√ßas

RegisterServerCallback("btc-wagons:checkMyWagons", function(source, cb)
    local src = source
    local citizenid = GetCitizenID(src)

    MySQL.Async.fetchAll("SELECT wagon, custom FROM btc_wagons WHERE citizenid = @citizenid", {
        ["@citizenid"] = citizenid
    }, function(result)
        if result and #result > 0 then
            local wagons = {}
            local customData = {}

            for _, data in ipairs(result) do
                table.insert(wagons, data.wagon)

                -- Agora cada carro√ßa tem sua customiza√ß√£o corretamente armazenada
                table.insert(customData, json.decode(data.custom) or {})
            end

            cb(wagons, customData) -- Retorna tabelas separadas para modelos e customiza√ß√µes
        else
            if Config.Debug then
                print("‚ö†Ô∏è Nenhuma carro√ßa encontrada para " .. citizenid)
            end
            cb({}, {}) -- Retorna listas vazias caso o jogador n√£o tenha carro√ßas
        end
    end)
end)

RegisterNetEvent("btc-wagons:saveCustomization")
AddEventHandler("btc-wagons:saveCustomization", function(wagonModel, custom, customType)
    local src = source
    local customPrice = Config.CustomPrice[customType]

    local citizenid, success = GetPlayerDataAndRemoveMoney(src, customPrice)

    if success then
        -- Converte a tabela custom para JSON
        local customJSON = json.encode(custom)

        -- Encontra o nome da carro√ßa dentro da customiza√ß√£o (no campo 'name')
        local wagonName = custom.name

        -- Atualiza a DB com a nova customiza√ß√£o, utilizando o modelo (wagonModel) e o nome (custom.name)
        MySQL.Async.execute(
            "UPDATE btc_wagons SET custom = @custom WHERE citizenid = @citizenid AND wagon = @wagonModel AND JSON_EXTRACT(custom, '$.name') = @wagonName",
            {
                ["@custom"] = customJSON,
                ["@citizenid"] = citizenid,
                ["@wagonModel"] = wagonModel, -- Adicionando o modelo (wagonModel) como condi√ß√£o na query
                ["@wagonName"] = wagonName    -- Buscando tamb√©m pelo nome (custom.name)
            }, function(affectedRows)
                if affectedRows > 0 then
                    Notify(locale["cl_custom_success"], 5000, "success", src)
                    if Config.Debug then
                        print("Carro√ßa " ..
                            wagonName .. " (modelo " .. wagonModel .. ") atualizada com sucesso para " .. citizenid)
                    end
                else
                    if Config.Debug then
                        print("Erro ao atualizar a carro√ßa para " .. citizenid)
                    end
                end
            end)
    else
        Notify(locale["cl_dont_have_money"], 5000, "error", src) -- Notifica o jogador que n√£o tem dinheiro suficiente
        return
    end
end)


----- Ativar uma nova carro√ßa

RegisterServerEvent('btc-wagons:toggleWagonActive', function(wagon, currentWagonCustom)
    local source = source
    local citizenID = GetCitizenID(source)     -- Obt√©m o CitizenID corretamente
    local customName = currentWagonCustom.name -- Obt√©m o nome da customiza√ß√£o

    if not customName or customName == "" then
        Notify(source, "Erro: Nome da customiza√ß√£o inv√°lido!", 5000, "error")
        return
    end

    -- Verificar se o jogador j√° tem uma carro√ßa ativa
    MySQL.Async.fetchAll("SELECT id FROM btc_wagons WHERE citizenid = @citizenid AND active = 1", {
        ["@citizenid"] = citizenID
    }, function(activeWagons)
        if activeWagons and #activeWagons > 0 then
            -- Se houver uma carro√ßa ativa, desativ√°-la
            local currentActiveWagonID = activeWagons[1].id
            MySQL.Async.execute("UPDATE btc_wagons SET active = 0 WHERE id = @id", {
                ["@id"] = currentActiveWagonID
            })
        end

        -- Agora ativamos a nova carro√ßa, verificando se o JSON `custom` cont√©m o mesmo nome
        MySQL.Async.execute([[
            UPDATE btc_wagons
            SET active = 1
            WHERE wagon = @wagon
            AND JSON_UNQUOTE(JSON_EXTRACT(custom, '$.name')) = @customName
            AND citizenid = @citizenid
        ]], {
            ["@wagon"] = wagon,
            ["@customName"] = customName,
            ["@citizenid"] = citizenID
        }, function(rowsChanged)
            if rowsChanged > 0 then
                Notify("Carro√ßa ativada com sucesso!", 5000, "success", source)
                Wait(500)
                TriggerEvent("btc-wagons:getWagonDataByCitizenID", source) -- Atualiza os dados da carro√ßa no cliente
            else
                Notify("Nenhuma carro√ßa encontrada com esse modelo e customiza√ß√£o!", 5000, "error", source)
            end
        end)
    end)
end)


--------------- Vender Carro√ßa ------------------
RegisterNetEvent("btc-wagons:sellWagon", function(wagonModel, custom)
    local src = source
    local citizenid = GetCitizenID(src) -- Obt√©m o citizenid do jogador

    if not custom or not custom.name then
        Notify(locale["no_wagon_found"], 5000, "error", src)
        return
    end

    local wagonName = custom.name -- Obt√©m o nome da carro√ßa dentro do custom

    -- Busca a carro√ßa no banco de dados usando o nome salvo
    MySQL.query("SELECT * FROM btc_wagons WHERE citizenid = ? AND JSON_EXTRACT(custom, '$.name') = ?",
        { citizenid, wagonName }, function(result)
            if result and #result > 0 then
                local wagonData = result[1]
                local customDB = json.decode(wagonData.custom or "{}") -- Converte JSON para tabela
                local buyMoneyType = customDB.buyMoneyType or "cash"   -- Obt√©m o tipo de pagamento original

                -- Encontrar o pre√ßo original no Config.Wagons
                local originalPrice = nil
                local altPrice = nil

                for type, wagons in pairs(Config.Wagons) do
                    if wagons[wagonModel] then
                        -- Primeiro tenta pegar o valor baseado no dinheiro original usado
                        originalPrice = (buyMoneyType == "gold" and wagons[wagonModel].priceGold) or
                            wagons[wagonModel].price
                        -- Salva o pre√ßo alternativo (se o primeiro n√£o existir)
                        altPrice = (buyMoneyType == "gold" and wagons[wagonModel].price) or wagons[wagonModel].priceGold
                        break
                    end
                end

                -- Se n√£o encontrou o pre√ßo original, tenta usar o pre√ßo alternativo
                if not originalPrice then
                    originalPrice = altPrice
                    buyMoneyType = (buyMoneyType == "gold") and "cash" or "gold" -- Troca para o outro tipo de dinheiro
                end

                -- Se ainda assim n√£o encontrou um pre√ßo v√°lido, cancela a venda
                if not originalPrice then
                    Notify(locale["no_price"], 5000, "error", src)
                    return
                end

                -- Calcular o pre√ßo de venda
                local sellPrice = originalPrice * Config.Sell

                -- Remover carro√ßa da DB
                MySQL.execute("DELETE FROM btc_wagons WHERE citizenid = ? AND JSON_EXTRACT(custom, '$.name') = ?",
                    { citizenid, wagonName })

                -- Adicionar o dinheiro ao jogador
                GetPlayerDataAndAddMoney(src, sellPrice, buyMoneyType)

                -- Notifica√ß√£o para o jogador
                Notify(locale["you_sell_wagon"] .. (buyMoneyType == "gold" and "ü™ô " or "üí∞ ") .. sellPrice .. "!", 5000,
                    "success", src)
            end
        end)
end)


local wagonAnimalsData = {}

function GetLabelFromModel(item)
    if item.type == "animal" then
        local entry = Config.AnimalsStorage[item.model]
        return entry and entry.label
    elseif item.type == "pelt" then
        local entry = Config.AnimalsStorage[item.peltquality]
        return entry and entry.label
    end
end

local function getWagonMenuData(wagonId, cb)
    if not wagonId then
        print("‚ö†Ô∏è ID da carro√ßa inv√°lido.")
        cb({})
        return
    end

    -- Se j√° estiver em mem√≥ria, usamos direto
    if wagonAnimalsData[wagonId] then
        local menuData = {}

        for _, item in ipairs(wagonAnimalsData[wagonId]) do
            local label = GetLabelFromModel(item) or "Item Desconhecido"
            table.insert(menuData, {
                label = label,
                infos = item
            })
        end

        cb(menuData)
        return
    end

    -- Se n√£o estiver em mem√≥ria, busca no banco
    MySQL.query("SELECT animals FROM btc_wagons WHERE id = ?", { wagonId }, function(result)
        local menuData = {}

        if result and result[1] and result[1].animals then
            local decoded = json.decode(result[1].animals) or {}
            -- Salva em mem√≥ria
            wagonAnimalsData[wagonId] = decoded

            for _, item in ipairs(decoded) do
                local label = GetLabelFromModel(item) or "Item Desconhecido"
                table.insert(menuData, {
                    label = label,
                    infos = item
                })
            end
        else
            print("‚ö†Ô∏è Nenhum dado encontrado na DB para a carro√ßa:", wagonId)
        end

        cb(menuData)
    end)
end


local function updateAndSave(wagonId, newAnimal, remove) ---- ser remove = true para remover o animal da DB
    if not wagonId or not newAnimal then
        print("‚ö†Ô∏è Dados inv√°lidos para updateAndSave")
        return
    end

    -- Garante que a tabela do wagon esteja inicializada
    if not wagonAnimalsData[wagonId] then
        wagonAnimalsData[wagonId] = {}
    end

    local animalsTable = wagonAnimalsData[wagonId]
    local foundIndex = nil

    -- Verifica se o item j√° existe
    for i, animal in ipairs(animalsTable) do
        local isSame =
            animal.model == newAnimal.model and
            animal.type == newAnimal.type and
            (
                (newAnimal.type == "animal" and
                    animal.outfit == newAnimal.outfit and
                    animal.skinned == newAnimal.skinned and
                    animal.quality == newAnimal.quality) or
                (newAnimal.type == "pelt" and animal.peltquality == newAnimal.peltquality)
            )

        if isSame then
            foundIndex = i
            break
        end
    end

    if remove then
        if foundIndex then
            local currentQty = animalsTable[foundIndex].quantity or 1
            if currentQty > 1 then
                animalsTable[foundIndex].quantity = currentQty - 1
            else
                table.remove(animalsTable, foundIndex)
            end
        else
            print("‚ö†Ô∏è Tentando remover item que n√£o existe na carro√ßa")
            return
        end
    else
        if foundIndex then
            animalsTable[foundIndex].quantity = (animalsTable[foundIndex].quantity or 1) + 1
        else
            local entry = {}
            if newAnimal.type == "pelt" then
                entry = newAnimal
                entry.peltquality = newAnimal.peltquality
                entry.quantity = 1
            elseif newAnimal.type == "animal" then
                entry = newAnimal
                entry.quantity = 1
                entry.metatag = newAnimal.metatag
            end

            table.insert(animalsTable, entry)
        end
    end

    -- Atualiza em mem√≥ria
    wagonAnimalsData[wagonId] = animalsTable

    -- Salva na DB
    local animalsJSON = json.encode(animalsTable)
    MySQL.update("UPDATE btc_wagons SET animals = ? WHERE id = ?", {
        animalsJSON,
        wagonId
    }, function(rowsChanged)
        if Config.Debug then
            if rowsChanged and rowsChanged > 0 then
                print(("‚úÖ Carro√ßa %s atualizada com %d item(ns)."):format(wagonId, #animalsTable))
            else
                print(("‚ö†Ô∏è Nenhuma carro√ßa atualizada com ID %s."):format(wagonId))
            end
        end
    end)
end

RegisterNetEvent("btc-wagons:storeAnimalInWagon", function(wagonId, newAnimal)
    local src = source

    if not wagonId or not newAnimal or type(newAnimal) ~= "table" then
        if Config.Debug then
            print("‚ö†Ô∏è Dados inv√°lidos para salvar animais na carro√ßa")
        end
        return
    end

    -- Se j√° temos os dados na cache, usamos direto
    local animalsTable = wagonAnimalsData[wagonId]

    if not animalsTable then
        -- Se ainda n√£o temos a cache, carrega da DB e atualiza
        MySQL.query("SELECT animals FROM btc_wagons WHERE id = ?", { wagonId }, function(result)
            local loadedAnimals = {}

            if result and result[1] and result[1].animals then
                loadedAnimals = json.decode(result[1].animals) or {}
            end

            wagonAnimalsData[wagonId] = loadedAnimals
            animalsTable = loadedAnimals

            updateAndSave(wagonId, newAnimal)
        end)
    else
        updateAndSave(wagonId, newAnimal)
    end
end)

RegisterServerCallback("btc-wagons:getAnimalStorage", function(source, cb, wagonId)
    local source = source
    getWagonMenuData(wagonId, function(menuData)
        cb(menuData) -- S√≥ chama o cb aqui, depois que getWagonMenuData tiver os dados
    end)
end)

------------ Remover um animal da carro√ßa

RegisterNetEvent("btc-wagons:removeAnimalFromWagon", function(wagonID, infos, label)
    local src = source
    TriggerClientEvent("btc-wagons:spawnAnimal", src, infos)
    ------ Continuar daqui, antes da fun√ß√£o de remover o animal (updateandsave), verificar se o animal existe na carro√ßa e fazer o jogador spawnar o animal
    updateAndSave(wagonID, infos, true)
end)

------ Remove a Carro√ßa do server
RegisterNetEvent("btc-wagons:removeWagon")
AddEventHandler("btc-wagons:removeWagon", function(netId, wagon)
    if wagons[netId] then
        local wagon = NetworkGetEntityFromNetworkId(netId)
        if wagon and DoesEntityExist(wagon) then
            DeleteEntity(wagon)
            if Config.Debug then
                print("Carro√ßa removida! NetworkID: " ..
                    netId .. " | WagonID: " .. wagons[netId].wagonID .. " | Dono: " .. wagons[netId].owner)
            end
        end

        wagons[netId] = nil -- Remove da tabela
    else --- caso seja o resource stop
        local wagon = NetworkGetEntityFromNetworkId(netId)
        if wagon and DoesEntityExist(wagon) then
            DeleteEntity(wagon)
            wagons[netId] = nil -- Remove da tabela
            if Config.Debug then
                print("Carro√ßa removida!")
            end
        end
    end
end)
